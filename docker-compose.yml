services:
  mysql-auth:
    image: mysql:8.0
    container_name: mysql-auth
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: authdb
      MYSQL_USER: authuser
      MYSQL_PASSWORD: authpass
    ports:
      - "33051:3306"
    volumes:
      - mysql_auth_data:/var/lib/mysql
      - ./mysql-init/auth-exporter-user.sql:/docker-entrypoint-initdb.d/auth-exporter-user.sql:ro
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  mysql-food:
    image: mysql:8.0
    container_name: mysql-food
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: fooddb
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "33071:3306"
    volumes:
      - mysql_food_data:/var/lib/mysql
      - ./mysql-init/food-exporter-user.sql:/docker-entrypoint-initdb.d/food-exporter-user.sql:ro
    command: --bind-address=0.0.0.0 --skip-name-resolve
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  mysql-order:
    image: mysql:8.0
    container_name: mysql-order
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: orderdb
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "33081:3306"
    volumes:
      - mysql_order_data:/var/lib/mysql
      - ./mysql-init/order-exporter-user.sql:/docker-entrypoint-initdb.d/order-exporter-user.sql:ro
    command: --bind-address=0.0.0.0 --skip-name-resolve
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  authservice:
    build: ./backend/authservice
    container_name: authservice
    ports:
      - "8081:8081"
    depends_on:
      mysql-auth:
        condition: service_healthy
    restart: unless-stopped
    env_file:
      - .env
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-auth:3306/authdb?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: password
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s

  foodservice:
    build: ./backend/foodservice
    container_name: foodservice
    ports:
      - "9093:9093"
    volumes:
      - ./uploads:/uploads
    depends_on:
      mysql-food:
        condition: service_healthy
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-food:3306/fooddb
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      # File upload configuration
      SPRING_SERVLET_MULTIPART_ENABLED: "true"
      SPRING_SERVLET_MULTIPART_MAX_FILE_SIZE: "5MB"
      SPRING_SERVLET_MULTIPART_MAX_REQUEST_SIZE: "5MB"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9093/actuator/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s

  orderservice:
    build: ./backend/orderservice
    container_name: orderservice
    ports:
      - "9094:9094"
    depends_on:
      mysql-order:
        condition: service_healthy
      authservice:
        condition: service_healthy
      foodservice:
        condition: service_healthy
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-order:3306/orderdb
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9094/actuator/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s

  apigateway:
    build: ./backend/apigateway
    container_name: apigateway
    ports:
      - "8080:8080"
    depends_on:
      authservice:
        condition: service_healthy
      foodservice:
        condition: service_healthy
      orderservice:
        condition: service_healthy
    restart: unless-stopped
    env_file:
      - .env
    environment:
      SPRING_PROFILES_ACTIVE: docker
      AUTH_SERVICE_URL: http://authservice:8081
      ORDER_SERVICE_URL: http://orderservice:9094
      FOOD_SERVICE_URL: http://foodservice:9093
      # File upload configuration
      SPRING_SERVLET_MULTIPART_ENABLED: "true"
      SPRING_SERVLET_MULTIPART_MAX_FILE_SIZE: "5MB"
      SPRING_SERVLET_MULTIPART_MAX_REQUEST_SIZE: "5MB"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health", "||", "exit", "1"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 180s

  frontend:
    build: 
      context: ./frontend
      args:
        VITE_API_URL: http://localhost:8080
    container_name: frontend
    ports:
      - "5173:80"
    depends_on:
      - apigateway
    restart: unless-stopped
    environment:
      - VITE_API_URL=http://localhost:8080

  # File server for serving uploaded images
  file-server:
    image: nginx:alpine
    container_name: file-server
    ports:
      - "8090:80"
    volumes:
      - ./uploads:/usr/share/nginx/html/uploads:ro
    restart: unless-stopped
    command: >
      sh -c "
      echo 'server {
        listen 80;
        server_name localhost;
        
        location /uploads/ {
          root /usr/share/nginx/html;
          expires 1y;
          add_header Cache-Control \"public, immutable\";
          add_header Access-Control-Allow-Origin \"*\";
          try_files \$$uri =404;
        }
        
        location / {
          return 404;
        }
      }' > /etc/nginx/conf.d/default.conf &&
      nginx -g 'daemon off;'
      "

    # =========================
  # Monitoring stack
  # =========================
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alerting:/etc/prometheus/alerting:ro
      - prometheus_data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=15d
    ports:
      - "9090:9090"
    restart: unless-stopped
    depends_on:
      - authservice
      - foodservice
      - orderservice
      - apigateway
      - cadvisor
      - blackbox-exporter
      - mysql-auth-exporter
      - mysql-food-exporter
      - mysql-order-exporter

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123   # change this
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"   # 3000 is used by your frontend, so expose Grafana on 3001
    restart: unless-stopped
    depends_on:
      - prometheus

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    privileged: true
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8085:8080"  # optional to view cAdvisor UI from host
    restart: unless-stopped

  # Optional (Linux hosts): node exporter for host-level CPU/RAM/disk metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    pid: host
    network_mode: host
    restart: unless-stopped
    # no ports published; runs on host :9100 via host network

  blackbox-exporter:
    image: prom/blackbox-exporter:latest
    container_name: blackbox-exporter
    ports:
      - "9115:9115"  # optional; Prometheus uses internal address anyway
    restart: unless-stopped

  # MySQL exporters (quick-start using root creds)
  mysql-auth-exporter:
    image: prom/mysqld-exporter:latest
    container_name: mysql-auth-exporter
    environment:
      DATA_SOURCE_NAME: exporter:exporterpass@tcp(mysql-auth:3306)/
    restart: unless-stopped
    depends_on:
      mysql-auth:
        condition: service_healthy

  mysql-food-exporter:
    image: prom/mysqld-exporter:latest
    container_name: mysql-food-exporter
    environment:
      DATA_SOURCE_NAME: exporter:exporterpass@tcp(mysql-food:3306)/
    restart: unless-stopped
    depends_on:
      mysql-food:
        condition: service_healthy

  mysql-order-exporter:
    image: prom/mysqld-exporter:latest
    container_name: mysql-order-exporter
    environment:
      DATA_SOURCE_NAME: exporter:exporterpass@tcp(mysql-order:3306)/
    restart: unless-stopped
    depends_on:
      mysql-order:
        condition: service_healthy


volumes:
  mysql_auth_data:
  mysql_food_data:
  mysql_order_data:
  prometheus_data:
  grafana_data:
